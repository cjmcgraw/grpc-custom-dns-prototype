plugins {
    id 'application'
    id 'com.google.protobuf' version '0.8.17'
    id 'idea'
    id 'java'
}

application {
    mainClass.set("github.cjmcgraw.dnstester.DnsTesterClient")
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 17
targetCompatibility = 17

def grpcVersion = '1.42.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.19.1'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-api:${grpcVersion}"
    implementation "io.grpc:grpc-core:${grpcVersion}"
    implementation "io.grpc:grpc-context:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "org.apache.logging.log4j:log4j-api:2.14.1"
    implementation "org.apache.logging.log4j:log4j-core:2.14.1"
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.4'
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:3.4.0"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

tasks.withType( JavaCompile ).configureEach {
    options.forkOptions.jvmArgs.addAll([
            '--add-opens',
            'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'
    ])
}

jar {
    manifest {
        attributes(
                'Main-Class': 'github.cjmcgraw.dnstester.DnsTesterClient',
                "Class-Path": configurations.runtimeClasspath.collect { it.absolutePath }.join(' ') + configurations.compileClasspath.collect { it.absolutePath }.join(' ')
        )
    }
}
